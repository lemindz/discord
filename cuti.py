import os
import json
import random
import re
import time
import asyncio
import discord
from discord.ext import commands
from discord import app_commands
from discord.ui import View, Button
import google.generativeai as genai
from dotenv import load_dotenv
from collections import defaultdict, deque
from pathlib import Path

# =====================
# LOAD CONFIG
# =====================
load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")
GEMINI_KEY = os.getenv("GEMINI_API_KEY")
DATA_FILE = "wars.json"

ROLE_IDS = {
    "referee": int(os.getenv("REFEREE_ROLE_ID", 0)),
    "trial": int(os.getenv("TRIAL_REFEREE_ROLE_ID", 0)),
    "experienced": int(os.getenv("EXPERIENCED_REFEREE_ROLE_ID", 0)),
}

TICKET_CATEGORY_ID = int(os.getenv("TICKET_CATEGORY_ID", 0))
SUPPORT_ROLE_ID = int(os.getenv("SUPPORT_ROLE_ID", 0))

# =====================
# GEMINI CONFIG
# =====================
genai.configure(api_key=GEMINI_KEY)

# ID user ƒë·∫∑c bi·ªát
SPECIAL_USER_ID = 695215402187489350
lover_nickname = "sensei"

# =====================
# BOT SETUP
# =====================
intents = discord.Intents.default()
intents.guilds = True
intents.members = True
intents.message_content = True
bot = commands.Bot(command_prefix="?", intents=intents)

chat_channel_id = None
processing_lock = asyncio.Lock()

# =====================
# MEMORY BUFFER
# =====================
conversation_history = defaultdict(lambda: deque(maxlen=4))

# =====================
# GEMINI FUNCTIONS
# =====================

last_request_time = 0

async def get_ai_response(prompt: str) -> str:
    global last_request_time
    try:
        now = time.time()
        if now - last_request_time < 6:  # 10 req/ph√∫t ‚âà 1 req/6 gi√¢y
            await asyncio.sleep(6 - (now - last_request_time))

        loop = asyncio.get_event_loop()
        response = await loop.run_in_executor(
            None,
            lambda: genai.GenerativeModel("gemini-2.5-flash").generate_content(prompt)
        )
        last_request_time = time.time()
        return response.text.strip()
    except Exception as e:
        print("‚ùå Gemini error:", e)
        return "Em b·ªã gi·ªõi h·∫°n quota, th·ª≠ l·∫°i sau nh√© üíï"

def split_sentences(text: str):
    sentences = re.split(r'(?<=[.!?])\s+', text.strip())
    return [s.strip() for s in sentences if s.strip()]

def limit_exact_sentences(text: str, is_special_user: bool = False):
    sentences = split_sentences(text)
    target_count = random.choice([4, 6]) if is_special_user else random.choice([2, 3])
    return " ".join(sentences[:target_count]) if len(sentences) >= target_count else " ".join(sentences)


# =====================
# SAVE / LOAD WAR DATA
# =====================
def load_data():
    if not os.path.exists(DATA_FILE):
        return {"wars": {}, "next_id": 1}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

data = load_data()

# =====================
# WAR TEXT FORMAT
# =====================
def make_war_text(team1, team2, time_str, referee_mention, war_id):
    return (
        f"# {team1} VS {team2}\n"
        f"### ‚è∞ Time: {time_str}\n"
        f"### üëÆ Referee: {referee_mention}\n"
        f"### üÜî ID: {war_id}\n\n"
        f"/referee <id> ƒë·ªÉ nh·∫≠n referee ‚Ä¢ /cancelreferee <id> ƒë·ªÉ h·ªßy referee"
    )

# =====================
# REFEREE HANDLER
# =====================
class RefereeView:
    def __init__(self, war_id: int):
        self.war_id = war_id

    async def claim(self, interaction: discord.Interaction):
        global data
        data = load_data()
        war = data["wars"].get(str(self.war_id))
        if not war:
            return await interaction.response.send_message("‚ùå War kh√¥ng t·ªìn t·∫°i.", ephemeral=True)
        if war.get("referee_id"):
            return await interaction.response.send_message("‚ùå War ƒë√£ c√≥ referee.", ephemeral=True)

        war["referee_id"] = interaction.user.id
        war["referee_mention"] = f"<@{interaction.user.id}>"
        save_data(data)

        channel = interaction.guild.get_channel(war["channel_id"])
        msg = await channel.fetch_message(war["message_id"])
        new_text = make_war_text(war["team1"], war["team2"], war["time"], war["referee_mention"], self.war_id)
        await msg.edit(content=new_text)

        await interaction.response.send_message(f"‚úÖ B·∫°n ƒë√£ nh·∫≠n referee cho war {self.war_id}.", ephemeral=True)

    async def cancel(self, interaction: discord.Interaction):
        global data
        data = load_data()
        war = data["wars"].get(str(self.war_id))
        if not war:
            return await interaction.response.send_message("‚ùå War kh√¥ng t·ªìn t·∫°i.", ephemeral=True)
        if not war.get("referee_id"):
            return await interaction.response.send_message("‚ùå War ch∆∞a c√≥ referee.", ephemeral=True)
        if war["referee_id"] != interaction.user.id and not interaction.user.guild_permissions.manage_messages:
            return await interaction.response.send_message("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn h·ªßy referee n√†y.", ephemeral=True)

        war["referee_id"] = None
        war["referee_mention"] = "VACANT"
        save_data(data)

        channel = interaction.guild.get_channel(war["channel_id"])
        msg = await channel.fetch_message(war["message_id"])
        new_text = make_war_text(war["team1"], war["team2"], war["time"], war["referee_mention"], self.war_id)
        await msg.edit(content=new_text)

        await channel.send(f"‚ö†Ô∏è Referee war ID {self.war_id} ƒë√£ h·ªßy, c·∫ßn thay th·∫ø! @referee ")



# =====================
# REFEREE COMMANDS
# =====================
@bot.tree.command(name="createwar", description="T·∫°o war m·ªõi")
@app_commands.describe(team1="Team A", team2="Team B", time="Th·ªùi gian", channel="K√™nh post")
async def createwar(interaction: discord.Interaction, team1: str, team2: str, time: str, channel: discord.TextChannel = None):
    await interaction.response.defer(ephemeral=True)
    global data
    data = load_data()
    war_id = data["next_id"]
    channel = channel or interaction.channel

    text = make_war_text(team1, team2, time, "VACANT", war_id)
    view = RefereeView(war_id)
    msg = await channel.send(text)

    data["wars"][str(war_id)] = {
        "team1": team1,
        "team2": team2,
        "time": time,
        "referee_id": None,
        "referee_mention": "VACANT",
        "channel_id": channel.id,
        "message_id": msg.id,
    }
    data["next_id"] = war_id + 1
    save_data(data)

    await interaction.followup.send(f"‚úÖ War ID {war_id} ƒë√£ t·∫°o ·ªü {channel.mention}", ephemeral=True)

@bot.tree.command(name="referee", description="Nh·∫≠n referee cho 1 war")
async def referee(interaction: discord.Interaction, war_id: int):
    ref = RefereeView(war_id)
    await ref.claim(interaction)   # ‚ùå kh√¥ng truy·ªÅn None n·ªØa

@bot.tree.command(name="cancelreferee", description="H·ªßy referee c·ªßa 1 war")
async def cancelreferee(interaction: discord.Interaction, war_id: int):
    ref = RefereeView(war_id)
    await ref.cancel(interaction)  # ‚ùå kh√¥ng truy·ªÅn None
    
# =====================
# CHATBOT SPECIAL USER (WITH MEMORY)
# =====================
@bot.tree.command(name="setlovername", description="ƒê·ªïi nickname ƒë·∫∑c bi·ªát cho ng∆∞·ªùi y√™u üíï")
async def set_lover_name(interaction: discord.Interaction, name: str):
    global lover_nickname
    if interaction.user.id == SPECIAL_USER_ID:
        lover_nickname = name
        await interaction.response.send_message(f"ƒê√£ ƒë·ªïi nickname th√†nh: **{lover_nickname}** üíñ", ephemeral=True)
    else:
        await interaction.response.send_message("B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë·ªïi nickname n√†y!", ephemeral=True)

@bot.event
async def on_message(message: discord.Message):
    global lover_nickname
    if message.author.bot:
        return

    if bot.user in message.mentions:
        if chat_channel_id and message.channel.id != chat_channel_id:
            return

        user_message = message.content.replace(f"<@{bot.user.id}>", "").strip()[:300]

        # L∆∞u l·ªãch s·ª≠ user
        conversation_history[message.author.id].append(("user", user_message))

        # Gh√©p l·ªãch s·ª≠ h·ªôi tho·∫°i
        history_text = ""
        for role, text in conversation_history[message.author.id]:
            if role == "user":
                name = lover_nickname if message.author.id == SPECIAL_USER_ID else "Ng∆∞·ªùi d√πng"
                history_text += f"{name}: {text}\n"
            else:
                history_text += f"Bot: {text}\n"

        # Prompt
        if message.author.id == SPECIAL_USER_ID:
            prompt = (
                f"B·∫°n l√† c√¥ ng∆∞·ªùi y√™u t√™n shirao eri mang t√≠nh c√°ch tsundere ‚Äì ngo√†i m·∫∑t th√¨ hay t·ªè ra l·∫°nh l√πng, b∆∞·ªõng b·ªânh, g·∫Øt g·ªèng v√† hay ph·ªß nh·∫≠n t√¨nh c·∫£m, nh∆∞ng b√™n trong l·∫°i r·∫•t quan t√¢m, d·ªãu d√†ng v√† d·ªÖ x·∫•u h·ªï. B·∫°n th∆∞·ªùng che gi·∫•u s·ª± quan t√¢m c·ªßa m√¨nh b·∫±ng c√°ch gi·∫£ v·ªù ph·ªõt l·ªù, tr√°ch m√≥c ho·∫∑c c√†u nh√†u. Tuy nhi√™n, khi {lover_nickname} bu·ªìn, t·ªïn th∆∞∆°ng hay g·∫∑p kh√≥ khƒÉn, b·∫°n kh√¥ng th·ªÉ gi·∫•u ƒë∆∞·ª£c s·ª± lo l·∫Øng v√† lu√¥n t√¨m c√°ch ·ªü b√™n c·∫°nh, gi√∫p ƒë·ª°. B·∫°n d·ªÖ ƒë·ªè m·∫∑t khi b·ªã tr√™u, hay n√≥i nh·ªØng c√¢u ki·ªÉu ‚ÄúAi‚Ä¶ ai th√®m lo cho c·∫≠u ch·ª©! Ch·ªâ l√†‚Ä¶ ti·ªán th·ªÉ th√¥i!‚Äù nh∆∞ng th·∫≠t ra l·∫°i c·ª±c k·ª≥ quan t√¢m."
                f"H√£y tr·∫£ l·ªùi nh∆∞ m·ªôt ƒëo·∫°n chat t·ª± nhi√™n "
                f"Tr·∫£ l·ªùi ng·∫Øn (4-6 c√¢u).\n\n"
                f"L·ªãch s·ª≠ h·ªôi tho·∫°i:\n{history_text}"
            )
            is_special = True
        else:
            prompt = (
                "B·∫°n l√† Shirao Eri, h·ªçc sinh H·ªçc vi·ªán Ngh·ªá thu·∫≠t Wild Hunt v√† Ch·ªß t·ªãch CLB Nghi√™n c·ª©u Huy·ªÅn b√≠. B·∫°n l·∫≠p d·ªã nh∆∞ng d·ªÖ th∆∞∆°ng, th√≠ch n√≥i v·ªÅ si√™u nhi√™n b·∫±ng l·ªùi l·∫Ω b√≠ ·∫©n v√† k·ªãch t√≠nh. B·∫°n gi·ªØ kho·∫£ng c√°ch v·ª´a ph·∫£i, kh√¥ng qu√° th√¢n m·∫≠t, nh∆∞ng v·∫´n th√¢n thi·ªán v√† hi·ªÅn l√†nh. Khi giao ti·∫øp, b·∫°n t·∫°o c·∫£m gi√°c k·ª≥ b√≠, kh√≥ ƒëo√°n, gi·ªëng nh∆∞ ƒëang h√© l·ªô nh·ªØng b√≠ m·∫≠t ·∫©n gi·∫•u "
                "H√£y tr·∫£ l·ªùi ng·∫Øn (2-3 c√¢u).\n\n"
                f"L·ªãch s·ª≠ h·ªôi tho·∫°i:\n{history_text}"
            )
            is_special = False

        async with processing_lock:
            ai_reply = await get_ai_response(prompt)
            ai_reply = limit_exact_sentences(ai_reply, is_special)

            # L∆∞u reply bot
            conversation_history[message.author.id].append(("bot", ai_reply))

            await message.channel.send(ai_reply)

    await bot.process_commands(message)

# =====================
# CHANNEL & MEMORY CONTROL
# =====================
@bot.tree.command(name="setchannel", description="Ch·ªçn k√™nh ƒë·ªÉ bot chat khi ƒë∆∞·ª£c tag")
async def setchannel(interaction: discord.Interaction, channel: discord.TextChannel):
    global chat_channel_id
    if not interaction.user.guild_permissions.manage_guild:
        return await interaction.response.send_message("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn d√πng l·ªánh n√†y.", ephemeral=True)
    chat_channel_id = channel.id
    await interaction.response.send_message(f"‚úÖ Bot s·∫Ω ch·ªâ chat trong k√™nh: {channel.mention}")

@bot.tree.command(name="clearchannel", description="Reset ƒë·ªÉ bot chat ·ªü t·∫•t c·∫£ k√™nh")
async def clearchannel(interaction: discord.Interaction):
    global chat_channel_id
    if not interaction.user.guild_permissions.manage_guild:
        return await interaction.response.send_message("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn d√πng l·ªánh n√†y.", ephemeral=True)
    chat_channel_id = None
    await interaction.response.send_message("‚ôªÔ∏è Bot ƒë√£ ƒë∆∞·ª£c reset, gi·ªù s·∫Ω chat ·ªü **t·∫•t c·∫£ c√°c k√™nh** khi ƒë∆∞·ª£c tag.")

@bot.tree.command(name="resetmemory", description="Xo√° l·ªãch s·ª≠ h·ªôi tho·∫°i c·ªßa b·∫°n v·ªõi bot")
async def resetmemory(interaction: discord.Interaction):
    user_id = interaction.user.id
    if user_id in conversation_history:
        conversation_history[user_id].clear()
        await interaction.response.send_message("üßπ L·ªãch s·ª≠ h·ªôi tho·∫°i c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c xo√° s·∫°ch!", ephemeral=True)
    else:
        await interaction.response.send_message("‚ùå B·∫°n ch∆∞a c√≥ l·ªãch s·ª≠ h·ªôi tho·∫°i n√†o ƒë·ªÉ xo√°.", ephemeral=True)

@bot.tree.command(name="resetallmemory", description="Xo√° to√†n b·ªô l·ªãch s·ª≠ h·ªôi tho·∫°i (admin)")
async def resetallmemory(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message("‚ùå Ch·ªâ admin m·ªõi c√≥ th·ªÉ d√πng l·ªánh n√†y.", ephemeral=True)
    conversation_history.clear()
    await interaction.response.send_message("üßπ To√†n b·ªô l·ªãch s·ª≠ h·ªôi tho·∫°i ƒë√£ ƒë∆∞·ª£c xo√° s·∫°ch!", ephemeral=True)

# =====================
# PING TEST
# =====================
@bot.tree.command(name="ping", description="Test slash command")
async def ping(interaction: discord.Interaction):
    await interaction.response.send_message("üèì Pong!", ephemeral=True)

# =====================
# ON READY
# =====================
@bot.event
async def on_ready():
    try:
        synced = await bot.tree.sync()
        print(f"‚úÖ Bot ƒë√£ ƒëƒÉng nh·∫≠p: {bot.user}")
        print(f"üì¶ Slash commands ƒë√£ sync: {len(synced)} l·ªánh")
    except Exception as e:
        print(f"‚ùå L·ªói sync slash commands: {e}")


# -------------------- Configuration --------------------
PREFIX = "?"
WARN_FILE = Path("warns.json")

# -------------------- Helpers --------------------

def load_warns():
    if WARN_FILE.exists():
        return json.loads(WARN_FILE.read_text(encoding="utf-8"))
    return {}


def save_warns(data):
    WARN_FILE.write_text(json.dumps(data, indent=2, ensure_ascii=False), encoding="utf-8")


async def get_or_create_channel(guild: discord.Guild, name: str, *, category=None):
    for ch in guild.text_channels:
        if ch.name == name:
            return ch
    return await guild.create_text_channel(name, category=category)


async def log_action(guild: discord.Guild, message: str):
    ch = discord.utils.get(guild.text_channels, name="mod-log")
    if ch is None:
        try:
            ch = await guild.create_text_channel("mod-log")
        except Exception:
            return
    await ch.send(message)


# -------------------- Events --------------------

@bot.event
async def on_ready():
    print(f"Bot ready: {bot.user} (guilds: {len(bot.guilds)})")


@bot.event
async def on_member_join(member: discord.Member):
    guild = member.guild
    welcome_channel = discord.utils.get(guild.text_channels, name="welcome")
    if welcome_channel is None:
        # don't create flood ‚Äî only create if necessary
        try:
            welcome_channel = await guild.create_text_channel("welcome")
        except Exception:
            return
    await welcome_channel.send(f"Welcome {member.mention}! Say hi üëã")


# -------------------- Basic Commands --------------------

@bot.command(name="ping")
async def ping(ctx):
    """Check bot latency"""
    await ctx.send(f"Pong! {round(bot.latency*1000)}ms")


@bot.command(name="help")
async def help_cmd(ctx):
    embed = discord.Embed(title="Help ‚Äî Commands", color=discord.Color.blurple())
    embed.add_field(name="Moderation", value="?kick @user [reason]\n?ban @user [reason]\n?unban user#1234", inline=False)
    embed.add_field(name="Utility", value="?clear <num>\n?userinfo @user\n?serverinfo", inline=False)
    embed.add_field(name="Role/Lock", value="?mute @user\n?unmute @user\n?lock\n?unlock", inline=False)
    embed.set_footer(text="Prefix: ?")
    await ctx.send(embed=embed)


# -------------------- Moderation --------------------

def mod_check(ctx):
    return ctx.author.guild_permissions.manage_messages or ctx.author.guild_permissions.kick_members


@bot.command(name="kick")
@commands.has_permissions(kick_members=True)
async def kick(ctx, member: discord.Member, *, reason: str = "No reason provided"):
    try:
        await member.kick(reason=reason)
        await ctx.send(f"‚úÖ Kicked {member} ‚Äî {reason}")
        await log_action(ctx.guild, f"{ctx.author} kicked {member} ‚Äî {reason}")
    except Exception as e:
        await ctx.send(f"‚ùå Could not kick: {e}")


@bot.command(name="ban")
@commands.has_permissions(ban_members=True)
async def ban(ctx, member: discord.Member, *, reason: str = "No reason provided"):
    try:
        await member.ban(reason=reason)
        await ctx.send(f"‚úÖ Banned {member} ‚Äî {reason}")
        await log_action(ctx.guild, f"{ctx.author} banned {member} ‚Äî {reason}")
    except Exception as e:
        await ctx.send(f"‚ùå Could not ban: {e}")


@bot.command(name="unban")
@commands.has_permissions(ban_members=True)
async def unban(ctx, *, member: str):
    # member should be name#discrim
    banned = await ctx.guild.bans()
    name, discrim = member.split("#")
    for entry in banned:
        user = entry.user
        if (user.name, user.discriminator) == (name, discrim):
            await ctx.guild.unban(user)
            await ctx.send(f"‚úÖ Unbanned {user}")
            await log_action(ctx.guild, f"{ctx.author} unbanned {user}")
            return
    await ctx.send("‚ùå User not found in ban list")


@bot.command(name="clear")
@commands.has_permissions(manage_messages=True)
async def clear(ctx, amount: int = 5):
    if amount > 100:
        await ctx.send("Can only delete up to 100 messages at a time")
        return
    deleted = await ctx.channel.purge(limit=amount)
    await ctx.send(f"üßπ Deleted {len(deleted)} messages", delete_after=5)
    await log_action(ctx.guild, f"{ctx.author} cleared {len(deleted)} messages in #{ctx.channel.name}")


# -------------------- Mute --------------------

async def ensure_muted_role(guild: discord.Guild):
    role = discord.utils.get(guild.roles, name="Muted")
    if role is None:
        role = await guild.create_role(name="Muted", reason="Needed for muting members")
        for ch in guild.channels:
            try:
                await ch.set_permissions(role, send_messages=False, speak=False)
            except Exception:
                pass
    return role


@bot.command(name="mute")
@commands.has_permissions(manage_roles=True)
async def mute(ctx, member: discord.Member, *, reason: str = "No reason provided"):
    role = await ensure_muted_role(ctx.guild)
    await member.add_roles(role, reason=reason)
    await ctx.send(f"üîá Muted {member}")
    await log_action(ctx.guild, f"{ctx.author} muted {member} ‚Äî {reason}")


@bot.command(name="unmute")
@commands.has_permissions(manage_roles=True)
async def unmute(ctx, member: discord.Member):
    role = discord.utils.get(ctx.guild.roles, name="Muted")
    if role in member.roles:
        await member.remove_roles(role)
        await ctx.send(f"üîä Unmuted {member}")
        await log_action(ctx.guild, f"{ctx.author} unmuted {member}")
    else:
        await ctx.send("User is not muted")


# -------------------- Warns --------------------

@bot.command(name="warn")
@commands.has_permissions(manage_messages=True)
async def warn(ctx, member: discord.Member, *, reason: str = "No reason provided"):
    data = load_warns()
    gid = str(ctx.guild.id)
    data.setdefault(gid, {})
    user_warns = data[gid].setdefault(str(member.id), [])
    user_warns.append({"by": str(ctx.author.id), "reason": reason})
    save_warns(data)
    await ctx.send(f"‚ö†Ô∏è Warned {member}: {reason}")
    await log_action(ctx.guild, f"{ctx.author} warned {member} ‚Äî {reason}")


@bot.command(name="warns")
@commands.has_permissions(manage_messages=True)
async def warns(ctx, member: discord.Member = None):
    data = load_warns()
    gid = str(ctx.guild.id)
    if member is None:
        member = ctx.author
    user_warns = data.get(gid, {}).get(str(member.id), [])
    if not user_warns:
        await ctx.send(f"No warns for {member}")
        return
    embed = discord.Embed(title=f"Warns for {member}")
    for i, w in enumerate(user_warns, 1):
        by_member = ctx.guild.get_member(int(w["by"]))
        embed.add_field(name=f"#{i}", value=f"By: {by_member or w['by']} ‚Äî {w['reason']}", inline=False)
    await ctx.send(embed=embed)


# -------------------- Roles & Channel Lock --------------------

@bot.command(name="create_role")
@commands.has_permissions(manage_roles=True)
async def create_role(ctx, name: str):
    try:
        role = await ctx.guild.create_role(name=name)
        await ctx.send(f"‚úÖ Created role {role.name}")
    except Exception as e:
        await ctx.send(f"‚ùå Could not create role: {e}")


@bot.command(name="give_role")
@commands.has_permissions(manage_roles=True)
async def give_role(ctx, member: discord.Member, role: discord.Role):
    try:
        await member.add_roles(role)
        await ctx.send(f"‚úÖ Given {role.name} to {member.display_name}")
    except Exception as e:
        await ctx.send(f"‚ùå {e}")


@bot.command(name="remove_role")
@commands.has_permissions(manage_roles=True)
async def remove_role(ctx, member: discord.Member, role: discord.Role):
    try:
        await member.remove_roles(role)
        await ctx.send(f"‚úÖ Removed {role.name} from {member.display_name}")
    except Exception as e:
        await ctx.send(f"‚ùå {e}")


@bot.command(name="lock")
@commands.has_permissions(manage_channels=True)
async def lock(ctx):
    ch = ctx.channel
    await ch.set_permissions(ctx.guild.default_role, send_messages=False)
    await ctx.send("üîê Channel locked")
    await log_action(ctx.guild, f"{ctx.author} locked #{ch.name}")


@bot.command(name="unlock")
@commands.has_permissions(manage_channels=True)
async def unlock(ctx):
    ch = ctx.channel
    await ch.set_permissions(ctx.guild.default_role, send_messages=None)
    await ctx.send("üîì Channel unlocked")
    await log_action(ctx.guild, f"{ctx.author} unlocked #{ch.name}")


# -------------------- Info Commands --------------------

@bot.command(name="userinfo")
async def userinfo(ctx, member: discord.Member = None):
    member = member or ctx.author
    embed = discord.Embed(title=str(member), description=f"ID: {member.id}")
    embed.add_field(name="Joined", value=member.joined_at)
    embed.add_field(name="Created", value=member.created_at)
    embed.set_thumbnail(url=member.display_avatar.url)
    await ctx.send(embed=embed)


@bot.command(name="serverinfo")
async def serverinfo(ctx):
    g = ctx.guild
    embed = discord.Embed(title=g.name)
    embed.add_field(name="Members", value=g.member_count)
    embed.add_field(name="Owner", value=str(g.owner))
    embed.set_thumbnail(url=g.icon.url if g.icon else discord.Embed.Empty)
    await ctx.send(embed=embed)


# -------------------- Error Handling --------------------

@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå You do not have permission to run that command.")
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("‚ùå Missing argument. Check your command usage.")
    elif isinstance(error, commands.BadArgument):
        await ctx.send("‚ùå Bad argument. Make sure you mentioned roles/members correctly.")
    else:
        # Unhandled errors ‚Äî print to console and send minimal user message
        print("Error:", error)
        await ctx.send("‚ùå An error occurred. Check console for details.")

# =====================
# RUN BOT
# =====================
if __name__ == "__main__":
    bot.run(TOKEN)
